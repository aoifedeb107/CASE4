/* AoifesParser.java */
/* Generated By:JavaCC: Do not edit this line. AoifesParser.java */
public class AoifesParser implements AoifesParserConstants {

public static void main(String [] args){
        AoifesParser parser;
        try{
                parser = new AoifesParser(new java.io.FileInputStream(args[0]));
                }
        catch (java.io.FileNotFoundException e)
                {
                        System.err.println("File " + args[0] + " not found. Please try a different file name.");
                        return;
                }

                try{
                        System.out.println("Running Aoife's parser program...");
                        parser.program();
                }
                catch(Exception e){
                        System.out.println("\u005cn");
                        System.err.println(e.getMessage());
                }

        }

/**************************
	JAVA LANGAUGE GRAMMAR 
***************************/
  final public 
void program() throws ParseException {
    trace_call("program");
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONST:
        case VAR:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        decl();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOL:
        case INT:
        case VOID:
        case SEMICOLON:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        function();
      }
      main_prog();
      jj_consume_token(0);
    } finally {
      trace_return("program");
    }
  }

/*****DECLARATION*******/
  final public 
void decl() throws ParseException {
    trace_call("decl");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        var_decl();
        break;
        }
      case CONST:{
        const_decl();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("decl");
    }
  }

/*******Define*******/
  final public 
void var_decl() throws ParseException {
    trace_call("var_decl");
    try {
      jj_consume_token(VAR);
      ident_list();
      jj_consume_token(COLON);
      type();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        ident_list();
        jj_consume_token(COLON);
        type();
      }
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("var_decl");
    }
  }

  final public void const_decl() throws ParseException {
    trace_call("const_decl");
    try {
      jj_consume_token(CONST);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      type();
      jj_consume_token(EQ);
      expression();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        type();
        jj_consume_token(EQ);
        expression();
      }
      jj_consume_token(SEMICOLON);
    } finally {
      trace_return("const_decl");
    }
  }

/******Function******/
  final public 
void function() throws ParseException {
    trace_call("function");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL:
      case INT:
      case VOID:{
        type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
        param_list();
        jj_consume_token(RPAREN);
        jj_consume_token(BEGIN);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CONST:
          case VAR:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_5;
          }
          decl();
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case BEGIN:
          case IDENTIFIER:
          case SEMICOLON:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_6;
          }
          statement();
          jj_consume_token(SEMICOLON);
        }
        jj_consume_token(RETURN);
        expression();
        break;
        }
      case SEMICOLON:{

        jj_consume_token(SEMICOLON);
        jj_consume_token(END);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("function");
    }
  }

  final public void param_list() throws ParseException {
    trace_call("param_list");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        jj_consume_token(COLON);
        type();
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          jj_consume_token(IDENTIFIER);
          jj_consume_token(COLON);
          type();
        }
        break;
        }
      default:
        jj_la1[9] = jj_gen;

      }
    } finally {
      trace_return("param_list");
    }
  }

/*****Variable Type*****/
  final public 
void type() throws ParseException {
    trace_call("type");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        break;
        }
      case BOOL:{
        jj_consume_token(BOOL);
        break;
        }
      case VOID:{
        jj_consume_token(VOID);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("type");
    }
  }

/*****Main Program*****/
  final public 
void main_prog() throws ParseException {
    trace_call("main_prog");
    try {
      jj_consume_token(MAIN);
      jj_consume_token(BEGIN);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONST:
        case VAR:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_8;
        }
        decl();
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:
        case WHILE:
        case BEGIN:
        case IDENTIFIER:
        case SEMICOLON:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_9;
        }
        statement();
        jj_consume_token(SEMICOLON);
      }
      jj_consume_token(END);
    } finally {
      trace_return("main_prog");
    }
  }

/*****SStatement Defined*****/
  final public 
void statement() throws ParseException {
    trace_call("statement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:{
          jj_consume_token(ASSIGN);
          expression();
          break;
          }
        case LPAREN:{
          jj_consume_token(LPAREN);
          arg_list();
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case BEGIN:{
        jj_consume_token(BEGIN);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IF:
          case WHILE:
          case BEGIN:
          case IDENTIFIER:
          case SEMICOLON:{
            ;
            break;
            }
          default:
            jj_la1[14] = jj_gen;
            break label_10;
          }
          statement();
          jj_consume_token(SEMICOLON);
        }
        jj_consume_token(END);
        break;
        }
      case IF:{
        jj_consume_token(IF);
        condition();
        jj_consume_token(THEN);
        statement();
        jj_consume_token(SEMICOLON);
        jj_consume_token(ELSE);
        statement();
        break;
        }
      case WHILE:{
        jj_consume_token(WHILE);
        condition();
        jj_consume_token(DO);
        statement();
        break;
        }
      default:
        jj_la1[15] = jj_gen;

      }
    } finally {
      trace_return("statement");
    }
  }

/*****Expression Defined*****/
  final public 
void expression() throws ParseException {
    trace_call("expression");
    try {
      fragmentCheck();
      expressionNew();
    } finally {
      trace_return("expression");
    }
  }

  final public void fragmentCheck() throws ParseException {
    trace_call("fragmentCheck");
    try {
      fragment();
      fragmentNew();
    } finally {
      trace_return("fragmentCheck");
    }
  }

  final public void expressionNew() throws ParseException {
    trace_call("expressionNew");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        jj_consume_token(ADD);
        expression();
        break;
        }
      case SUB:{
        jj_consume_token(SUB);
        expression();
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
        arg_list();
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[16] = jj_gen;

      }
    } finally {
      trace_return("expressionNew");
    }
  }

  final public void fragment() throws ParseException {
    trace_call("fragment");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        break;
        }
      case TRUE:{
        jj_consume_token(TRUE);
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
        break;
        }
      case NUMBER:{
        jj_consume_token(NUMBER);
        break;
        }
      case ADD:
      case SUB:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADD:{
          jj_consume_token(ADD);
          break;
          }
        case SUB:{
          jj_consume_token(SUB);
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        fragment();
        break;
        }
      default:
        jj_la1[18] = jj_gen;

      }
    } finally {
      trace_return("fragment");
    }
  }

  final public void fragmentNew() throws ParseException {
    trace_call("fragmentNew");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL:{
        jj_consume_token(MUL);
        fragment();
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        fragment();
        break;
        }
      default:
        jj_la1[19] = jj_gen;

      }
    } finally {
      trace_return("fragmentNew");
    }
  }

  final public void condition() throws ParseException {
    trace_call("condition");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:{
        jj_consume_token(NOT);
        condition();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        conditionNew();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RPAREN:{
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        cond();
      }
    } finally {
      trace_return("condition");
    }
  }

  final public void conditionNew() throws ParseException {
    trace_call("conditionNew");
    try {
      expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NEQ:
      case LT:
      case GT:
      case LTEQ:
      case GTEQ:{
        assignments();
        expression();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        expression();
        jj_consume_token(RPAREN);
        conditionNew();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        expression();
      }
    } finally {
      trace_return("conditionNew");
    }
  }

/*Created new function to hold assignments for ease of use*/
  final public void assignments() throws ParseException {
    trace_call("assignments");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
        break;
        }
      case NEQ:{
        jj_consume_token(NEQ);
        break;
        }
      case LT:{
        jj_consume_token(LT);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        break;
        }
      case LTEQ:{
        jj_consume_token(LTEQ);
        break;
        }
      case GTEQ:{
        jj_consume_token(GTEQ);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("assignments");
    }
  }

  final public void cond() throws ParseException {
    trace_call("cond");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        condition();
        break;
        }
      case OR:{
        jj_consume_token(OR);
        condition();
        break;
        }
      default:
        jj_la1[25] = jj_gen;

      }
    } finally {
      trace_return("cond");
    }
  }

  final public void ident_list() throws ParseException {
    trace_call("ident_list");
    try {
      jj_consume_token(IDENTIFIER);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
    } finally {
      trace_return("ident_list");
    }
  }

  final public void arg_list() throws ParseException {
    trace_call("arg_list");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            break label_12;
          }
          jj_consume_token(COMMA);
          jj_consume_token(IDENTIFIER);
        }
        break;
        }
      default:
        jj_la1[28] = jj_gen;

      }
    } finally {
      trace_return("arg_list");
    }
  }

  /** Generated Token Manager. */
  public AoifesParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1001000,0x2020800,0x1001000,0x0,0x0,0x1001000,0x2c010000,0x2020800,0x0,0x20000000,0x2020800,0x1001000,0x2c010000,0x0,0x2c010000,0x2c010000,0x20000000,0x0,0x20808000,0x0,0x0,0x0,0x80000,0x0,0x0,0x100400,0x0,0x0,0x20000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x10000,0x0,0x8000,0x8000,0x0,0x10000,0x10000,0x8000,0x0,0x0,0x0,0x10000,0x42000,0x10000,0x0,0x18,0x18,0x19,0x60,0x2000,0x4000,0x0,0x3f80,0x1f80,0x0,0x8000,0x8000,0x0,};
   }

  /** Constructor with InputStream. */
  public AoifesParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AoifesParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AoifesParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AoifesParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AoifesParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AoifesParser(AoifesParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AoifesParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
